https://leetcode.com/problems/implement-trie-prefix-tree/
class TrieNode{
        private:
       static const int R = 26;
       TrieNode *links[R] ={nullptr};
        public:
            bool isEnd = false;

            bool containsKey(char ch){
                ch = tolower(ch);
                int ind = ch -'a';
                if (ind >= R || ind < 0) return false;
                return (links[ind]!=nullptr);
            }
            void put(char ch, TrieNode *node){
                ch = tolower(ch);
                links[ch-'a'] = node;
            }

            TrieNode *get(char ch){
                ch = tolower(ch);
                if (!containsKey(ch)) return nullptr;
                TrieNode *node = links[ch-'a'];
                return node;
            }    
    };
    
class Trie {
    private:
          TrieNode *root;
    public:
        Trie() {
            root = new TrieNode();
        }

        void insert(string word) {
            TrieNode *node = root;
            for (int i=0; i<word.size(); i++){
                char ch = word[i];
                if (!node->containsKey(ch)) node->put(ch, new TrieNode());  
                node = node->get(ch);
            }
            node->isEnd = true;
        }

        bool search(string word) {
            TrieNode *node = root;
            for (int i=0; i<word.size(); i++){
                char ch = word[i];
                if (node->containsKey(ch)) node  = node->get(ch);
                else return false;
            }
            return (node!=nullptr && node->isEnd);
        }

        bool startsWith(string prefix) {
            TrieNode *node = root;
            for (int i=0; i<prefix.size(); i++){
                char ch = prefix[i];
                if (node->containsKey(ch)) node  = node->get(ch);
                else return false;
            }
            return (node!=nullptr);
        }
};
