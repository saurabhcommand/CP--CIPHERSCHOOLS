//https://leetcode.com/problems/find-median-from-data-stream/
class MedianFinder
{
public:
    
    MedianFinder(){
        
    }
    void addNum(int num) {
        if(maxQ.empty() || num<maxQ.top())
        {
            maxQ.push(num);
        }
        else
        {
            minQ.push(num);
        }
        if(maxQ.size()>minQ.size() || maxQ.size()-minQ.size()==2)
        {
            minQ.push(maxQ.top());
            maxQ.pop();
        }
        if(minQ.size()>maxQ.size() || minQ.size()-maxQ.size()==2)
        {
            maxQ.push(minQ.top());
            minQ.pop();
        }
    }
    double findMedian() {
        return (maxQ.size()==minQ.size())?(maxQ.top()+minQ.top())/2.0:(maxQ.size()>minQ.size()?maxQ.top():minQ.top());
    }

private:
    priority_queue<int> maxQ;
    priority_queue<int, vector<int>, greater<int>> minQ;
};

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder* obj = new MedianFinder();
 * obj->addNum(num);
 * double param_2 = obj->findMedian();
 */
