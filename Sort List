https://leetcode.com/problems/sort-list/
class Solution {
public:
	ListNode* merge(ListNode* head1, ListNode* head2){
		if(!head1)
            return head2;
		if(!head2)
            return head1;
		ListNode* head;
		if(head2->val<head1->val){
			head=head2;
			head2=head2->next;
		}
		else if(head1->val<=head2->val){
			head=head1;
			head1=head1->next;
		}
		ListNode* dummy=head;
		while(head1 && head2){
			if(head1->val<=head2->val){
				head->next=head1;
				head=head->next;
				head1=head1->next;
			}
			else{
				head->next=head2;
				head=head->next;
				head2=head2->next;
			}
		}
		if(head1){
			head->next=head1;
		}
		if(head2){
			head->next=head2;
		}
		return dummy;
	}
    
    
	ListNode* sortList(ListNode* head)
    {
		if(!head)
            return head;
		if(!head->next)
            return head;
		if(!head->next->next)
        {
			if(head->val>head->next->val){
				ListNode* tmp=head;
				head=head->next;
				tmp->next=NULL;
				head->next=tmp;
			}
			return head;
		}
		ListNode* fast=head;
		ListNode* slow=head;
		while(fast && fast->next)
        {
			slow=slow->next;
			fast=fast->next->next;
		}
		ListNode* right=slow->next;
		slow->next=NULL;
		ListNode* temp1=sortList(head);
		ListNode* temp2=sortList(right);
		//ListNode* res=merge(temp1,temp2);
		return merge(temp1,temp2);;


	}
};
